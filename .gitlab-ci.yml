image: continuumio/miniconda3:latest

stages:
  - test
  - prebuild
  - build

variables:
  DOCKER_HOST: tcp://docker:2375
  DOCKER_TLS_CERTDIR: ""

.test_template:
  stage: test
  before_script:
    - conda install mamba -c conda-forge
    - mamba env update -n fine --file=requirements.yml
    - mamba env update -n fine --file=requirements_dev.yml
    - mamba info --envs
    - source activate fine
    - python -m pip install -e .

.build_template:
  stage: build
  image: docker
  services:
    - docker:dind
  when: on_success
  dependencies:
    - prebuild

test-code:
  extends: .test_template
  script:
    - python -m pytest --cov=FINE test/

test-formatting:
  stage: test
  script:
    # Dry-run black auto-formatter. If the code needs reformatting this test
    # will fail.   
    - conda env create -n fine --file=requirements_dev.yml
    - source activate fine
    - black --version
    - black --check FINE
    - black --check test

test-notebooks:
  extends: .test_template
  script:
    # Run nbval to test all notebooks in examples folder and show 20 longest
    # cell executing durations. With 'nbval-lax', notebooks are only tested for
    # execution errors Cells tagged 'nbval-check-output' are checked for
    # consistent output Cells tagged 'nbval-skip' are skipped.
    - python -m pytest --nbval-lax --current-env --durations=20 examples/
  # Only test examples notebooks for branches master and develop
  only:
    refs:
      - master
      - develop
      - merge_requests

prebuild:
  stage: prebuild
  script:
    # Extract the current image version from setup.py
    # Check image version
    - export IMAGE_VERSION=$(grep -E -o "(version=)(*.*)" setup.py | cut -d\' -f2)
    - echo "IMAGE_VERSION=$IMAGE_VERSION"
    # Export a master and dev tag for each versions using the current image version
    - export MASTER_TAG=fzjiek3/fine:${IMAGE_VERSION}
    - export DEV_TAG=fzjiek3/fine-dev:${IMAGE_VERSION}
    # Pass tags to build.env to be usable in the next stage
    - echo "MASTER_TAG=$MASTER_TAG" >> build.env
    - echo "DEV_TAG=$DEV_TAG" >> build.env
  artifacts:
    reports:
      dotenv: build.env
  only:
    refs:
      - master
      - include_dockerfile
  when: on_success

master-build:
  extends: .build_template
  script:
    # Login to the DockerHub repo using a specialized access token.
    # Then, build the docker image with the tested code and tag it 
    # with the current version, as well as latest.
    # Afterwards, push to DockerHub.
    - docker login -u fzjiek3 -p $DOCKER_AT
    - docker build -t $MASTER_TAG -t fzjiek3/fine:latest .
    - docker push $MASTER_TAG 
    - docker push fzjiek3/fine:latest
  only:
    refs:
      - master
      - include_dockerfile

# Uncomment to enable dev builds
#
#dev-build:
#  extends: .build_template
#  script:
#    - docker login -u fzjiek3 -p $DOCKER_AT
#    - docker build -t $DEV_TAG
#    - docker push $DEV_TAG
#  only:
#    refs:
#      - develop
